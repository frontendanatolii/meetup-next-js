{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\incode\\\\meetup-app-next-js\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport { MeetUpDetail } from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = ({\n  meetupData\n}) => {\n  return /*#__PURE__*/_jsxDEV(MeetUpDetail, {\n    imageUrl: meetupData.imageUrl,\n    title: meetupData.title,\n    address: meetupData.address,\n    description: meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  const uri = 'mongodb+srv://probro12356:xoamEy4vrJ9V8691@cluster0.wbgjpqc.mongodb.net/?retryWrites=true&w=majority';\n  const client = await MongoClient.connect(uri);\n  const collection = client.db('meetup').collection('meetups');\n  const meetups = await collection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  const meetupId = context.params.meetupId;\n  const uri = 'mongodb+srv://probro12356:xoamEy4vrJ9V8691@cluster0.wbgjpqc.mongodb.net/?retryWrites=true&w=majority';\n  const client = await MongoClient.connect(uri);\n  const collection = client.db('meetup').collection('meetups');\n  const selectedMeetup = await collection.find({\n    _id: new ObjectId(meetupId)\n  }).toArray();\n  console.log(selectedMeetup);\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        title: selectedMeetup.title,\n        imageUrl: selectedMeetup.imageUrl,\n        description: selectedMeetup.description,\n        address: selectedMeetup.address\n      }\n    }\n  };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["D:/incode/meetup-app-next-js/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetUpDetail","MeetupDetails","meetupData","imageUrl","title","address","description","getStaticPaths","uri","client","connect","collection","db","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","console","log","props"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,SAASC,YAAT,QAA6B,uCAA7B;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoB;AACxC,sBACE,QAAC,YAAD;AACE,IAAA,QAAQ,EAAEA,UAAU,CAACC,QADvB;AAEE,IAAA,KAAK,EAAED,UAAU,CAACE,KAFpB;AAGE,IAAA,OAAO,EAAEF,UAAU,CAACG,OAHtB;AAIE,IAAA,WAAW,EAAEH,UAAU,CAACI;AAJ1B;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,OAAO,MAAMC,cAAc,GAAG,YAAW;AACvC,QAAMC,GAAG,GACP,sGADF;AAGA,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoBF,GAApB,CAArB;AAEA,QAAMG,UAAU,GAAGF,MAAM,CAACG,EAAP,CAAU,QAAV,EAAoBD,UAApB,CAA+B,SAA/B,CAAnB;AAEA,QAAME,OAAO,GAAG,MAAMF,UAAU,CAACG,IAAX,CAAgB,EAAhB,EAAoB;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAApB,EAAgCC,OAAhC,EAAtB;AAEAP,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AAAV,KAAb,CAAZ;AAFF,GAAP;AAID,CAhBM;AAkBP,OAAO,MAAMC,cAAc,GAAG,MAAMC,OAAN,IAAkB;AAC9C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,GAAG,GACP,sGADF;AAGA,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoBF,GAApB,CAArB;AAEA,QAAMG,UAAU,GAAGF,MAAM,CAACG,EAAP,CAAU,QAAV,EAAoBD,UAApB,CAA+B,SAA/B,CAAnB;AAEA,QAAMgB,cAAc,GAAG,MAAMhB,UAAU,CAACG,IAAX,CAAgB;AAACC,IAAAA,GAAG,EAAE,IAAIhB,QAAJ,CAAawB,QAAb;AAAN,GAAhB,EAA+CP,OAA/C,EAA7B;AAEAY,EAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;AAEAlB,EAAAA,MAAM,CAACQ,KAAP;AAEA,SAAO;AACLa,IAAAA,KAAK,EAAE;AACL5B,MAAAA,UAAU,EAAE;AACVE,QAAAA,KAAK,EAAEuB,cAAc,CAACvB,KADZ;AAEVD,QAAAA,QAAQ,EAAEwB,cAAc,CAACxB,QAFf;AAGVG,QAAAA,WAAW,EAAEqB,cAAc,CAACrB,WAHlB;AAIVD,QAAAA,OAAO,EAAEsB,cAAc,CAACtB;AAJd;AADP;AADF,GAAP;AAUD,CA1BM;AA4BP,eAAeJ,aAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\nimport { MeetUpDetail } from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = ({ meetupData }) => {\n  return (\n    <MeetUpDetail\n      imageUrl={meetupData.imageUrl}\n      title={meetupData.title}\n      address={meetupData.address}\n      description={meetupData.description}\n    />\n  )  \n};\n\nexport const getStaticPaths = async() => {\n  const uri =\n    'mongodb+srv://probro12356:xoamEy4vrJ9V8691@cluster0.wbgjpqc.mongodb.net/?retryWrites=true&w=majority';\n\n  const client = await MongoClient.connect(uri);\n\n  const collection = client.db('meetup').collection('meetups');\n\n  const meetups = await collection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({ params: { meetupId: meetup._id.toString() } })) \n  }\n};\n\nexport const getStaticProps = async(context) => {\n  const meetupId = context.params.meetupId;\n\n  const uri =\n    'mongodb+srv://probro12356:xoamEy4vrJ9V8691@cluster0.wbgjpqc.mongodb.net/?retryWrites=true&w=majority';\n\n  const client = await MongoClient.connect(uri);\n\n  const collection = client.db('meetup').collection('meetups');\n\n  const selectedMeetup = await collection.find({_id: new ObjectId(meetupId)}).toArray();\n\n  console.log(selectedMeetup);\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        title: selectedMeetup.title,\n        imageUrl: selectedMeetup.imageUrl,\n        description: selectedMeetup.description,\n        address: selectedMeetup.address\n      },\n    }\n  }\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}